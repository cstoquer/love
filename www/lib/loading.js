//█████████████████████████████████████████████████████████████████
//████▄░████████████████████████▄░█████▄███████████████████████████
//█████░████▀▄▄▄▄▀██▀▄▄▄▄▀██▀▄▄▄▀░███▄▄░████▄░▀▄▄▀██▀▄▄▄▀░▄████████
//█████░████░████░██▀▄▄▄▄░██░████░█████░█████░███░██░████░█████████
//███▀▀░▀▀██▄▀▀▀▀▄██▄▀▀▀▄░▀█▄▀▀▀▄░▀██▀▀░▀▀██▀░▀█▀░▀█▄▀▀▀▄░█████████
//███████████████████████████████████████████████████▀▀▀▀▄█████████
/**
 * @module loading
 * @desc   Loading functions helpers
 *
 * @author Cedric Stoquer
 */


/**▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
 * @function module:loading.loadJson
 * @desc load a json file
 *
 * @param {String}   path - file path
 * @param {Function} cb   - asynchronous callback function
 */
function loadJson(path, cb) {
	var xobj = new window["XMLHttpRequest"]();
	xobj["onreadystatechange"] = function () {
		if (~~xobj["readyState"] !== 4) return;
		if (~~xobj["status"] !== 200) return cb("JSON load error:" + xobj["status"]);
		return cb(null, JSON.parse(xobj["response"]));
	};
	xobj["open"]("GET", path, true);
	xobj["send"]();
}


/**▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
 * @function module:loading.sendRequest
 * @desc  send some data to server
 *
 * @param {Object}   data - data to send to the server
 * @param {Function} cb   - asynchronous callback function
 */
function sendRequest(data, cb) {
	var xobj = new window["XMLHttpRequest"]();
	xobj["open"]("POST", "req", true);
	xobj["setRequestHeader"]("Content-Type", "application/json; charset=UTF-8");
	xobj["onreadystatechange"] = function () {
		if (~~xobj["readyState"] !== 4) return;
		if (~~xobj["status"] !== 200) return cb("Request error:" + xobj["status"]);
		return cb(null, JSON.parse(xobj["response"]));
	};
	xobj["send"](JSON.stringify(data));
}


/**▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
 * @function module:loading.loadImage
 * @desc      load an image file
 *
 * @param {String}   path - file path
 * @param {Function} cb   - asynchronous callback function
 */
function loadImage(path, cb) {
	var img = new window["Image"]();
	// TODO: remove listeners when load / error
	img["onload"]  = function () { cb(null, img); };
	img["onerror"] = function () { cb("Image load error:" + path); };
	img["src"] = path;
}


/**▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
 * @function module:loading.loadSound
 * @desc  load an image file
 *
 * @param {String}   path - file path
 * @param {Function} cb   - asynchronous callback function
 */
function loadSound(path, cb) {
	// var snd = document.createElement("audio");
	var snd = new window["Audio"]();
	snd["preload"] = true;
	snd["loop"] = false;
	
	function onSoundLoad() {
		cb(null, snd);
		snd["removeEventListener"]("canplaythrough", onSoundLoad);
		snd["removeEventListener"]("error", onSoundError);
	}

	function onSoundError() {
		cb("Sound load error");
		snd["removeEventListener"]("canplaythrough", onSoundLoad);
		snd["removeEventListener"]("error", onSoundError);
	}

	snd["addEventListener"]("canplaythrough", onSoundLoad);
	snd["addEventListener"]("error", onSoundError);
	snd["src"] = path;
	snd["load"]();
	// document.body.appendChild(snd);
}


/**▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
 * @function module:loading.preloadAssets
 *
 * @desc   Preload all static assets of the game.
 *         The function first ask the server for the asset list.
 *         Server respond with an object containing the list of images
 *         to load and all data that are put in the www/asset folder.
 *         At this step, if request fail, function send an error.
 *         The function then proceed the loading of image assets. 
 *         If an image loading fail, the loading continue, and loading
 *         status is set to 1 (an image load fail).
 *         Images are load by 5 in parallel.
 *
 *         Function end and wil return an object that mix all data and 
 *         all assets so that it will have the same structure as the 
 *         "www/asset" folder.
 *
 *
 *         Assets list and data are automaticaly generated by server
 *         Just drop images and json files in the www/asset/ folder
 *         and the server will take care of it !
 *                 
 *
 * @param {Function} cb   - asynchronous callback function to call when all is
 *                          preloaded
 */

function preloadAssets(cb) {
	loadJson("asset.json", function (error, assetList) {
		if (error) return cb(error);
		var data = assetList["dat"];
		var images = assetList["img"];
		var sounds = assetList["snd"];
		var imgCount = images.length;
		var count  = imgCount + sounds.length;
		var load = 0;
		var done = 0;
		function storeAsset(path, obj) {
			var splitted = path.split('/');
			var filename = splitted.pop();
			var id = filename.split('.');
			id.pop();
			id = id.join('.');
			var container = data;
			for (var i = 0, len = splitted.length; i < len; i++) {
				container = container[splitted[i]];
			}
			container[id] = obj;
		}
		function loadAssets() {
			var current = load + done;
			var path;
			var loadFunc;
			if (current < imgCount) {
				path = images[current];
				loadFunc = loadImage;
			} else {
				path = sounds[current - imgCount];
				loadFunc = loadSound;
			}
			done += 1;
			// TODO: if we are in sound, call loadSound function !
			loadFunc("asset/" + path, function (error, img) {
				if (!error) storeAsset(path, img);
				load += 1;
				done -= 1;
				if (load + done < count) loadAssets()
				else if (done === 0) cb(null, data);
			});
		}
		// loading assets in parallel, with a limit of 5 parallel downloads.
		var parallel = Math.min(5, count - 1);
		for (var j = 0; j <= parallel; j++) loadAssets();
	});
}